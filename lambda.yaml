AWSTemplateFormatVersion: 2010-09-09
Description: Create a bucket with a name based on CloudFormation Stack name
# aws cloudformation create-stack --stack-name lambda-s3-example --template-body file://lambda.yaml --capabilities CAPABILITY_IAM
# aws cloudformation update-stack --stack-name lambda-s3-example --template-body file://lambda.yaml --capabilities CAPABILITY_IAM
# aws cloudformation delete-stack --stack-name lambda-s3-example 

# Resources
Resources:

  S3Bucket:
      Type: AWS::S3::Bucket

  LambdaS3Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: writeS3Policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: !Join ["", [!GetAtt S3Bucket.Arn, '/*']]

  LambdaS3Function:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import boto3
          import os
          def lambda_handler(event, context):
                bucket_name = os.environ['bucketname']
                
                string = "some-string"
                encoded_string = string.encode("utf-8")
            
                file_name = "some-file.txt"
            
                s3 = boto3.resource("s3")
                s3.Bucket(bucket_name).put_object(Key=file_name, Body=encoded_string)
          
      Handler: index.lambda_handler
      Runtime: python3.9
      Architectures: 
        - arm64
      Timeout: 10
      Role: !GetAtt LambdaS3Role.Arn
      Environment:
        Variables:
          bucketname: !Ref S3Bucket
